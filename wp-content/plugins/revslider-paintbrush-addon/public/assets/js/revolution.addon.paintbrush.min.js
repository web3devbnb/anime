/* 
 * @author    ThemePunch <info@themepunch.com>
 * @link      http://www.themepunch.com/
 * @copyright 2019 ThemePunch
 * Version 2.1.3
 */

! function() {
    jQuery("rs-slide[data-revaddonpaintbrush]").each(function() {
        var t = jQuery(this),
            i = t.children("img"),
            s = i.attr("data-bg"),
            e = "";
        s && 1 < (s = s.split("c:")).length && (e = s[1].split(";")[0]);
        var a = "p:center center;";
        e && (a += "c:" + e + ";"), i.attr({
            "data-bg": a,
            "data-kenburns": "off"
        }).removeAttr("data-panzoom"), t.attr("data-revaddonpaintbrushedges") && t.attr("data-anim", "ei:d;eo:d;s:1000;r:0;t:fade;sl:0;")
    }), jQuery("rs-slide[data-revaddonpaintbrushfallback]").each(function() {
        var t = jQuery(this),
            i = t.children("img"),
            s = t.attr("data-revaddonpaintbrushfallback"),
            e = i.attr("data-lazyload"),
            a = e ? "data-lazyload" : "src";
        e ? i.data("lazyload", s) : i.attr(a, s)
    });
    var p, s = "ontouchend" in document;

    function v(t, i, s, e, a, n, h, r, o, d) {
        if (this.pause = !0, this.options = i, this.slide = s, this.img = e, this.slot = a, this.levels = n, this.widths = h, this.slider = t, this.fixEdges = r, this.edgeFix = o, d) {
            var c = document.createElement("style");
            c.type = "text/css", document.head.appendChild(c), this.blurstyle = {
                sheet: c,
                css: "." + d + " rs-sbg, ." + d + " .slot {filter: blur({{blur}}px);}"
            }, this.resizeBlur(), t.on("revolution.slide.afterdraw", this.blurSizer.bind(this))
        }
    }
    window.RevSliderPaintBrush = function(t, u) {
        if (p = t) {
            var i = !(!p.fn.revolution || !p.fn.revolution[u[0].id]) && p.fn.revolution[u[0].id];
            i && u.on("revolution.slide.onloaded", function() {
                var d = "",
                    c = i.responsiveLevels,
                    l = i.gridwidth;
                if (Array.isArray(c) || (c = [c]), Array.isArray(l) || (l = [l]), u.find("rs-slide[data-revaddonpaintbrush]").each(function() {
                        var t, i, s, e, a = new Image,
                            n = p(this).addClass("revaddon-paintbrush").data("paintbrushloading", !0),
                            h = n.attr("data-key"),
                            r = n.find("rs-sbg-wrap"),
                            o = JSON.parse(this.getAttribute("data-revaddonpaintbrush"));
                        (o = p.extend(!0, {
                            blurAmount: 10,
                            fadetime: 1e3,
                            edgefix: 10,
                            fixedges: !1,
                            style: "round",
                            blur: !1,
                            scaleblur: !1,
                            responsive: !1,
                            disappear: !1,
                            carousel: !1
                        }, o)).blur && (t = "revaddonblurfilter_" + h, o.scaleBlur ? e = t : d += "." + t + " rs-sbg, ." + t + " .slot {filter: blur(" + o.blurAmount + "px);}", n.addClass(t)), o.fixedges && o.edgefix && (i = 1 + .01 * o.edgefix, s = "scale(" + (s = i.toFixed(2)) + ", " + s + ")", r.find("rs-sbg").css("transform", s), d += "." + (t = "revaddonblurfilterfix_" + h) + " rs-sbg {transform: " + s + " !important}", n.addClass(t)), a.onload = function() {
                            o.width = this.naturalWidth, o.height = this.naturalHeight;
                            var t = new v(u, o, n, a, r[0], c, l, s, i, e);
                            n.removeData("paintbrushloading").data("revaddonbrush", t), n.data("paintbrushcurrent") && (t.pause = !1, n.removeData("paintbrushcurrent"), t.inited || t.init())
                        }, a.onerror = function() {
                            console.log("PaintBrush Addon: background image could not be loaded")
                        }, a.src = o.image
                    }), d) {
                    var t = document.createElement("style");
                    t.type = "text/css", t.innerHTML = d, document.head.appendChild(t)
                }
            }).on("revolution.slide.onbeforeswap", function(t, i) {
                i.currentslide.removeData("paintbrushcurrent");
                var s = i.currentslide.data("revaddonbrush");
                s && s.canvas && (s.canvas.className = "revaddonpaintbrush swapping")
            }).on("revolution.slide.onafterswap", function(t, i) {
                var s;
                u.find(".revaddon-paintbrush").each(function() {
                    (s = p(this).removeData("paintbrushcurrent").data("revaddonbrush")) && (s.pause = !0, s.reset(), s.canvas && (s.canvas.className = "revaddonpaintbrush"))
                });
                var e = u.revcurrentslide() - 1,
                    a = u.find("rs-slide").eq(e);
                a.length || (a = u.find("rs-slide").eq(0)), (s = a.data("revaddonbrush")) ? (s.pause = !1, s.ready = !0, s.inited || s.init()) : a.data("paintbrushloading") && a.data("paintbrushcurrent", !0)
            })
        }
    }, v.prototype = {
        init: function() {
            this.canvas = document.createElement("canvas"), this.brush = document.createElement("canvas"), this.canvas.className = "revaddonpaintbrush", this.context = this.canvas.getContext("2d"), this.ctx = this.brush.getContext("2d"), this.slot.parentNode.insertBefore(this.canvas, this.slot.nextSibling), this.inited = !0, this.steps = [], this.options.carousel ? setTimeout(this.start.bind(this), 100) : this.start()
        },
        start: function() {
            this.options.carousel ? this.slide.on("mousemove touchmove", this.onMove.bind(this)) : this.slider.on("mousemove touchmove", this.onMove.bind(this)), this.slider.on("revolution.slide.afterdraw", this.sizer.bind(this)), this.resize()
        },
        onMove: function(t) {
            if (!this.pause) {
                s && ((t = t.originalEvent).preventDefault(), t.touches && (t = t.touches[0]));
                var i = this.canvas.getBoundingClientRect();
                this.steps.unshift({
                    time: Date.now(),
                    x: t.clientX - i.left,
                    y: t.clientY - i.top
                }), this.draw()
            }
        },
        updateSteps: function() {
            for (var t = Date.now(), i = 0; i < this.steps.length; i++) t - this.steps[i].time > this.options.fade && (this.steps.length = i)
        },
        paint: function() {
            for (var t, i, s = this.steps.length, e = Date.now(), a = 1; a < s; a++) i = (e - this.steps[a].time) / this.options.fadetime, t = Math.max(1 - i, 0), this.ctx.lineCap = this.options.style, this.ctx.strokeStyle = "rgba(0, 0, 0, " + t + ")", this.ctx.shadowBlur = this.options.strength, this.ctx.shadowColor = "#000000", this.ctx.lineWidth = this.options.size, this.ctx.beginPath(), this.ctx.moveTo(this.steps[a - 1].x, this.steps[a - 1].y), this.ctx.lineTo(this.steps[a].x, this.steps[a].y), this.ctx.stroke()
        },
        draw: function() {
            this.updateSteps(), cancelAnimationFrame(this.frame), this.steps.length && (this.frame = window.requestAnimationFrame(this.draw.bind(this))), this.context.clearRect(0, 0, this.canvas.width, this.canvas.height), this.options.disappear && this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height), this.paint(), this.context.drawImage(this.img, this.cx, this.cy, this.cw, this.ch, 0, 0, this.canvas.width, this.canvas.height), this.context.globalCompositeOperation = "destination-in", this.context.drawImage(this.brush, 0, 0), this.context.globalCompositeOperation = "source-over"
        },
        reset: function() {
            this.context && (cancelAnimationFrame(this.frame), this.context.clearRect(0, 0, this.canvas.width, this.canvas.height), this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height))
        },
        sizer: function() {
            this.options.carousel ? (clearTimeout(this.timer), this.timer = setTimeout(this.resize.bind(this), 250)) : this.resize()
        },
        resize: function(t) {
            t || this.reset();
            var i = this.slide.width(),
                s = this.slide.height();
            this.edgeFix && (i *= this.edgeFix, s *= this.edgeFix);
            var e = Math.min(i / this.options.width, s / this.options.height);
            if (t) return e;
            var a = this.options.width * e,
                n = this.options.height * e,
                h = 1;
            a < i && (h = i / a), Math.abs(h - 1) < 1e-14 && n < s && (h = s / n);
            var r = window.devicePixelRatio || 1;
            if (this.cw = this.options.width / (a * h / i), this.ch = this.options.height / (n * h / s), this.cx = .5 * (this.options.width - this.cw), this.cy = .5 * (this.options.height - this.ch), this.canvas.width = this.brush.width = i * r, this.canvas.height = this.brush.height = s * r, this.canvas.style.width = i + "px", this.canvas.style.height = s + "px", this.cw *= r, this.ch *= r, this.canvas.getContext("2d").scale(r, r), window.canvas = this.canvas, this.options.responsive) {
                for (var o = this.levels.length, d = 0, c = 0; c < o; c++) i < this.levels[c] && (d = c);
                var l = Math.min(i / this.widths[d], 1);
                this.options.size = this.options.origsize * l
            }
        },
        blurSizer: function() {
            this.options.carousel ? (clearTimeout(this.blurTimer), this.blurTimer = setTimeout(this.resizeBlur.bind(this), 250)) : this.resizeBlur()
        },
        resizeBlur: function() {
            var t = this.blurstyle;
            t.sheet.innerHTML = t.css.replace("{{blur}}", Math.max(Math.round(this.options.blurAmount * this.resize(!0)), 1))
        }
    }
}();